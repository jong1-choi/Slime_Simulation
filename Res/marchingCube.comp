#version 460 core
layout( local_size_x = 8) in;

#define WIDTH 0.5f
#define GRID_WIDTH 16

const vec3 target = vec3(5.f, 1.f ,5.f);

layout(std430, binding = 1) buffer cellPosition_buf
{
	vec4 cellPosition[];
};

layout(std430, binding = 2) buffer cellValue_buf
{
	vec4 cellValue[];
};

layout(std430, binding = 3) buffer vertex_buf
{
	vec4 vertex[];
};

layout(std430, binding = 4) buffer face_buf
{
	vec4 face[];
};

layout(std430, binding = 5) buffer normal_buf
{
	vec4 normal[];
};

struct GRIDCELL{
	vec3 p[8];
	float val[8];
};

int GetIndex(in vec3 p) {
	vec3 toOrigin = .5f * WIDTH * vec3(GRID_WIDTH, GRID_WIDTH, GRID_WIDTH);
	p = toOrigin + (p - target) / WIDTH;
	return int(p.z) + (int(p.y) * GRID_WIDTH) + (int(p.x) * GRID_WIDTH * GRID_WIDTH);
}

// Hard coding to order vertex with the marching cube reference
GRIDCELL GetGridCell(in vec3 pos) {
	GRIDCELL cell;
		
	int index	= GetIndex(vec3(pos.x		 , pos.y		, pos.z	 	   ));
	cell.p[0]	= cellPosition[index].xyz;
	cell.val[0] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x + WIDTH, pos.y		, pos.z		   ));
	cell.p[1]	= cellPosition[index].xyz;
	cell.val[1] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x + WIDTH, pos.y		, pos.z + WIDTH));
	cell.p[2]	= cellPosition[index].xyz;
	cell.val[2] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x		 , pos.y		, pos.z + WIDTH));
	cell.p[3]	= cellPosition[index].xyz;
	cell.val[3] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x		 , pos.y + WIDTH, pos.z		   ));
	cell.p[4]	= cellPosition[index].xyz;
	cell.val[4] = cellValue[index].x;
																				
	index		= GetIndex(vec3(pos.x + WIDTH, pos.y + WIDTH, pos.z		   ));
	cell.p[5]	= cellPosition[index].xyz;
	cell.val[5] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x + WIDTH, pos.y + WIDTH, pos.z + WIDTH));
	cell.p[6]	= cellPosition[index].xyz;
	cell.val[6] = cellValue[index].x;

	index		= GetIndex(vec3(pos.x		 , pos.y + WIDTH, pos.z + WIDTH));
	cell.p[7]	= cellPosition[index].xyz;
	cell.val[7] = cellValue[index].x;

	return cell;
}

void main(void) {
	uint i = gl_GlobalInvocationID.x;
	GRIDCELL cell = GetGridCell(cellPosition[i].xyz);

}


